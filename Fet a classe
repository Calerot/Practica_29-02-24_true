import numpy as np
import matplotlib.pyplot as plt

def getV(x):
    if (abs(x) < 1):
        potvalue = 1 - x 
    else:
       potvalue = 2
    return potvalue




def Eq(n,h,x):
    F = np.zeros([n,n])
    for i in range(0,n):
        F[i,i] = -2*((h**2)*getV(x[i]) + 1)
        if i > 0:
           F[i,i-1] = 1
           if i < n-1:
              F[i,i+1] = 1
    return F


L = 6
xlower = -L/2.0
xupper = L/2.0


h = 0.02 


x = np.arange(xlower,xupper+h,h)

npoints=len(x)

print("Using",npoints, "grid points.")


print("Calculating matrix...")
F=Eq(npoints,h,x)


print("Diagonalizing...")
eigenValues, eigenVectors = np.linalg.eig(F)


idx = eigenValues.argsort()[::-1]
w = eigenValues[idx]
vs = eigenVectors[:,idx]


E = - w/(2.0*h**2)


print("RESULTS:")
for k in range(0,3):
  Erel=E[k]/4.0  
  print("State ",k,": Energy = %.4f" %E[k],', E/V='+'{:.4f}'.format(Erel))


psi = [None]*npoints


for k in range(0,len(w)):
	psi[k] = vs[:,k]
	integral = h*np.dot(psi[k],psi[k])
	psi[k] = psi[k]/integral**0.5


print("Plotting")

xx = np.linspace(-3, 3, 1000)
yy = np.zeros_like(xx)

for i in range(len(xx)):
    if xx[i] < -1:
        yy[i] = 2
    elif abs(xx[i]) < 1:
        yy[i] = -1 - xx[i] 
    elif xx[i] > 1:
        yy[i] = 2

for v in range(0,3):
    plt.plot(x,psi[v],label=r'$\psi_v(x)$, k = ' + str(v))
    plt.plot(xx , yy)
    plt.title(r'$n=$'+ str(v) + r', $E_n$=' + '{:.4f}'.format(E[v]))
    plt.legend()
    plt.xlabel(r'$x$ (a.u.)')
    plt.ylabel(r'$\psi(x)$')
    plt.show()


print("Bye")
